import os
import requests
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# === ENVIRONMENT VARIABLES ===
GITHUB_USER = os.getenv("GITHUB_USER")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

EMAIL_FROM = os.getenv("EMAIL_FROM")
EMAIL_TO = os.getenv("EMAIL_TO")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PWD = os.getenv("SMTP_PWD")

REQUESTS_TIMEOUT = 10

if not all([GITHUB_USER, GITHUB_TOKEN, EMAIL_FROM, EMAIL_TO, SMTP_SERVER, SMTP_USER, SMTP_PWD]):
    raise ValueError("‚ùå Missing one or more required environment variables.")

HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github+json"
}

def search_prs(query):
    url = f"https://api.github.com/search/issues?q={query}&per_page=100"
    response = requests.get(url, headers=HEADERS, timeout=REQUESTS_TIMEOUT)
    response.raise_for_status()
    return response.json().get("items", [])

def print_to_console(pr_data):
    print(f"\nüìÑ GitHub PR Report for {GITHUB_USER}\n" + "-" * 40)
    for section, prs in pr_data.items():
        print(f"\nüîπ {section} ({len(prs)})")
        if not prs:
            print("  No open pull requests found.")
        for pr in prs:
            repo = pr["repository_url"].split("/")[-1]
            print(f"  - #{pr['number']} {pr['title']} [{repo}]")
            print(f"    {pr['html_url']} (by {pr['user']['login']})")

def generate_html_report(pr_data):
    html = f"""
    <html>
    <body style="font-family: Arial, sans-serif; background: #f5f5f5; padding: 20px;">
      <div style="max-width: 700px; margin: auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 8px rgba(0,0,0,0.1);">
        <div style="text-align: center; margin-bottom: 20px;">
          <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" width="64" height="64" />
          <h2 style="color: #333;">GitHub Pull Request Report</h2>
          <p style="color: #666;">for <strong>{GITHUB_USER}</strong></p>
        </div>
    """

    for section, prs in pr_data.items():
        html += f"""
        <h3 style="border-bottom: 1px solid #eee; padding-bottom: 4px;">{section} ({len(prs)})</h3>
        """
        if not prs:
            html += "<p style='color: #999;'>No open pull requests found.</p>"
        else:
            html += "<ul style='padding-left: 20px;'>"
            for pr in prs:
                repo = pr['repository_url'].split('/')[-1]
                html += f"""
                <li style="margin-bottom: 8px;">
                  <a href="{pr['html_url']}" style="color: #0366d6; text-decoration: none;">
                    #{pr['number']} {pr['title']}
                  </a>
                  <div style="font-size: 12px; color: #555;">
                    in <strong>{repo}</strong> by <em>{pr['user']['login']}</em>
                  </div>
                </li>
                """
            html += "</ul>"
    html += """
        <div style="margin-top: 30px; font-size: 11px; color: #aaa; text-align: center;">
          Generated by GitHub PR Reporter Script
        </div>
      </div>
    </body>
    </html>
    """
    return html

def send_email(subject, html_body):
    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = EMAIL_FROM
    msg['To'] = EMAIL_TO

    part = MIMEText(html_body, 'html')
    msg.attach(part)

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USER, SMTP_PWD)
        server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
    print(f"\nüìß Report emailed to {EMAIL_TO}")

def main():
    print(f"üì° Fetching open pull requests for {GITHUB_USER}...\n")

    categories = {
        "Created by you": f"is:pr is:open author:{GITHUB_USER}",
        "Assigned to you": f"is:pr is:open assignee:{GITHUB_USER}",
        "Mentioning you": f"is:pr is:open mentions:{GITHUB_USER}",
        "Review requested from you": f"is:pr is:open review-requested:{GITHUB_USER}"
    }

    pr_results = {name: search_prs(query) for name, query in categories.items()}

    print_to_console(pr_results)
    html_report = generate_html_report(pr_results)
    send_email(f"GitHub PR Report for {GITHUB_USER}", html_report)

if __name__ == "__main__":
    main()
